name: Backend(User API) Build and Test
on:
  push:
    paths:
      - '.github/workflows/ci-user-api-for-all.yaml'
      - 'api/server/user/**'

env:
  PROTOC_VERSION: 3.15.8
  PROTOTOOL_VERSION: 1.10.0

jobs:
  setup_proto:
    name: Setup Proto
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./proto

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: ['^16.1']
        golang: ['^1.15.6']

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Use Golang ${{ matrix.golang }}
        uses: actions/setup-go@v2

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Cache protobuf library
        uses: actions/cache@v2
        with:
          path: /usr/local/bin
          key: protoc

      - name: Build protobuf library
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: /tmp
        run: |
          git clone https://github.com/protocolbuffers/protobuf.git
          cd ./protobuf
          git submodule update --init --recursive
          ./autogen.sh
          ./autogen.sh  # run autogen twice, see below
          ./configure
          make
          make check

      - name: Install protobuf library
        working-directory: /tmp/protobuf
        run: |
          sudo make install
          sudo ldconfig

      - name: Install prototool
        run: |
          curl -fSLO "https://github.com/uber/prototool/releases/download/v${PROTOTOOL_VERSION}/prototool-$(uname -s)-$(uname -m)"
          sudo mv ./prototool-$(uname -s)-$(uname -m) /usr/local/bin/prototool
          sudo chmod +x /usr/local/bin/prototool

      - name: Install gRPC tools
        run: |
          sudo make install

      - name: Generate proto
        run: |
          make protoc-service SERVICE_PATH='./../api/server/user'

  build_and_test:
    name: Build and Test
    needs: setup_proto
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api/server/user

    strategy:
      matrix:
        os: [ubuntu-latest] # exclude: macos-latest, windows-latest
        golang: ['^1.15.6']

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Use Golang ${{ matrix.golang }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}

      - name: Check golang version
        run: go version

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Setup
        run: make setup

      - name: Fmt
        run: make fmt

      - name: Vet
        run: make vet

      - name: Lint
        run: make lint

      - name: Test
        run: make test

      - name: Build
        run: make build
