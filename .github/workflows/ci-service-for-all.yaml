name: Backend(Microservice) Build and Test
on:
  push:
    paths:
      - '.github/workflows/ci-service-for-all.yaml'
      - 'api/service/**'

env:
  PROTOBUF_VERSION: 3.9.0
  PROTOTOOL_VERSION: 1.10.0
  ARTIFACT_TAG: ${{ github.sha }}
  TEST_DB_HOST: 127.0.0.1
  TEST_DB_PORT: 3306
  TEST_DB_USERNAME: root
  TEST_DB_PASSWORD: 12345678

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api/service

    strategy:
      matrix:
        os: [ubuntu-latest] # exclude: macos-latest, windows-latest
        golang: ['^1.17.2']
        protobuf: ['3.x'] # https://github.com/marketplace/actions/setup-protoc

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Use Golang ${{ matrix.golang }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}

      - uses: arduino/setup-protoc@v1
        with:
          version: ${{ matrix.protobuf }}

      - name: Install
        run: make install

      - name: Container build
        working-directory: .
        run: docker-compose -f docker-compose.ci.yaml build service_proto

      - name: Generate go codes from proto
        working-directory: .
        run: docker-compose -f docker-compose.ci.yaml run --rm service_proto make protoc

      - name: Start MySQL container
        working-directory: .
        run: docker-compose -f docker-compose.ci.yaml up --build --detach mysql

      - name: Wait start MySQL
        run: |
          #!/bin/bash

          until mysqladmin ping -h${TEST_DB_HOST} -P${TEST_DB_PORT} -u${TEST_DB_USERNAME} -p${TEST_DB_PASSWORD}; do
            echo 'mysql is unavailable - sleeping'
            sleep 3
          done
          echo 'mysql is up - executing command'

      - name: Check golang version
        run: go version

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Setup
        run: make setup

      - name: Fmt
        run: make fmt

      - name: Vet
        run: make vet

      - name: Lint
        run: make lint

      - name: Test
        run: make test

      - name: Build user service
        run: make build SERVICE=user

      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          flags: service
          verbose: true
