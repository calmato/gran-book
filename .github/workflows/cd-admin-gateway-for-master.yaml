name: BFF(Admin) Deploy
on:
  push:
    paths:
      - '.github/workflows/cd-admin-gateway-for-master.yaml'
      - 'api/gateway/admin/**'
      - 'infra/docker/api/gateway/admin/*'
    branches:
      - master

env:
  PROTOBUF_VERSION: 3.9.0
  PROTOTOOL_VERSION: 1.10.0
  ARTIFACT_TAG: ${{ github.sha }}
  GCP_PROJECT_ID: ${{ secrets.STG_GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.STG_GCP_REGION }}
  GCR_HOSTNAME: ${{ secrets.STG_GCR_HOSTNAME }}
  GCR_IMAGE_NAME: admin-gateway
  GCR_IMAGE_TAG: ${{ github.sha }}
  # CLOUD_RUN_NAME: admin-gateway
  GKE_ZONE: ${{ secrets.STG_GKE_ZONE }}
  GKE_CLUSTER_NAME: ${{ secrets.STG_GKE_CLUSTER_NAME }}
  GKE_DEPLOYMENT_NAME: admin-gateway

jobs:
  setup_proto:
    name: Setup Proto
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./proto

    strategy:
      matrix:
        os: [ubuntu-latest]
        golang: ['^1.16.7']

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Use Golang ${{ matrix.golang }}
        uses: actions/setup-go@v2

      - name: Install protobuf
        run: |
          curl -fSLO https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protoc-${PROTOBUF_VERSION}-linux-x86_64.zip
          unzip protoc-${PROTOBUF_VERSION}-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/* /usr/local/bin/
          sudo mv protoc/include/* /usr/local/include/
          sudo chmod +x /usr/local/bin/protoc
          sudo chmod +x /usr/local/include/google

      - name: Install prototool
        run: |
          curl -fSLO "https://github.com/uber/prototool/releases/download/v${PROTOTOOL_VERSION}/prototool-$(uname -s)-$(uname -m)"
          sudo mv ./prototool-$(uname -s)-$(uname -m) /usr/local/bin/prototool
          sudo chmod +x /usr/local/bin/prototool

      - name: Install gRPC tools
        run: |
          export GOPATH=$(go env GOPATH)
          make install

      - name: Generate proto
        run: |
          export PATH="$PATH:$(go env GOPATH)/bin"
          make generate

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact-${ARTIFACT_TAG}
          path: api/gateway/admin/proto

  deploy_image_for_stg:
    name: Deploy container image for staging
    needs: setup_proto
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: [ubuntu-latest] # exclude: macos-latest, windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download artifact for setup proto
        uses: actions/download-artifact@v2
        with:
          name: artifact-${ARTIFACT_TAG}
          path: api/gateway/admin/proto

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.STG_GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.STG_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure gcloud
        run: |
          gcloud config set project ${GCP_PROJECT_ID}
          gcloud config set run/platform managed
          gcloud config set run/region ${GCP_REGION}
          gcloud auth configure-docker

      - name: Docker Build
        run: |
          docker build -f ./infra/docker/api/gateway/admin/Dockerfile -t ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME} .

      - name: Attached Tag
        run: |
          docker tag ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME} ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME}:latest
          docker tag ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME} ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME}:${GCR_IMAGE_TAG}

      - name: Push Google Cloud Registry for Staging
        run: |
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME}

  # deploy_cloud_run_for_stg:
  #   name: Deploy Cloud Run for Staging
  #   needs: deploy_image_for_stg
  #   runs-on: ${{ matrix.os }}
  #   defaults:
  #     run:
  #       shell: bash

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest] # exclude: macos-latest, windows-latest

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Setup Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         service_account_email: ${{ secrets.STG_GCP_SA_EMAIL }}
  #         service_account_key: ${{ secrets.STG_GCP_SA_KEY }}
  #         export_default_credentials: true

  #     - name: Configure gcloud
  #       run: |
  #         gcloud config set project ${GCP_PROJECT_ID}
  #         gcloud config set run/platform managed
  #         gcloud config set run/region ${GCP_REGION}
  #         gcloud auth configure-docker

  #     - name: Deploy container image to Cloud Run
  #       run: |
  #         gcloud run deploy ${CLOUD_RUN_NAME} --image ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_IMAGE_NAME}:latest --region ${GCP_REGION} --platform managed

  update_gke_pod_for_stg:
    name: Update GKE pod image for staging
    needs: deploy_image_for_stg
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: [ubuntu-latest] # exclude: macos-latest, windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.STG_GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.STG_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure gcloud
        run: |
          gcloud config set project ${GCP_PROJECT_ID}
          gcloud config set run/platform managed
          gcloud config set run/region ${GCP_REGION}
          gcloud components install kubectl

      - name: Connect to GKE cluster
        run: |
          gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} \
            --zone ${GKE_ZONE} \
            --project ${GCP_PROJECT_ID}

      - name: Udpate pod image
        working-directory: ./infra/kubernetes
        run: make update-manifest RESOURCE=deploy APP_NAME=${GKE_DEPLOYMENT_NAME}
