syntax = "proto3";

package service;

option go_package = "github.com/calmato/gran-book/proto";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "common/common.proto";

service UserService {
  rpc ListUser(ListUserRequest) returns (UserListResponse);
  rpc ListFollow(ListFollowRequest) returns (FollowListResponse);
  rpc ListFollower(ListFollowerRequest) returns (FollowerListResponse);
  rpc MultiGetUser(MultiGetUserRequest) returns (UserMapResponse);
  rpc GetUser(GetUserRequest) returns (UserResponse);
  rpc GetUserProfile(GetUserProfileRequest) returns (UserProfileResponse);
  rpc Follow(FollowRequest) returns (UserProfileResponse);
  rpc Unfollow(UnfollowRequest) returns (UserProfileResponse);
}

message ListUserRequest {
  common.Search search = 1;
  common.Order order = 2;
  int64 limit = 3 [
    (validate.rules).int64 = {
      lte: 200
    }
  ];
  int64 offset = 4 [
    (validate.rules).int64 = {
      gte: 0
    }
  ];
}

message ListFollowRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
  common.Order order = 2;
  int64 limit = 3 [
    (validate.rules).int64 = {
      lte: 200
    }
  ];
  int64 offset = 4 [
    (validate.rules).int64 = {
      gte: 0
    }
  ];
}

message ListFollowerRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
  common.Order order = 2;
  int64 limit = 3 [
    (validate.rules).int64 = {
      lte: 200
    }
  ];
  int64 offset = 4 [
    (validate.rules).int64 = {
      gte: 0
    }
  ];
}

message MultiGetUserRequest {
  repeated string user_ids = 1 [
    (validate.rules).repeated = {
      min_items: 1
      max_items: 200
      unique: true
    }
  ];
}

message GetUserRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
}

message GetUserProfileRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
}

message FollowRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
  string follower_id = 2 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
}

message UnfollowRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
  string follower_id = 2 [
    (validate.rules).string = {
      min_len: 1
    }
  ];
}

message UserResponse {
  string id = 1; // ユーザーID
  string username = 2; // ユーザー名
  common.Gender gender = 3; // 性別
  string email = 4; // メールアドレス
  string phone_number = 5; // 電話番号
  common.Role role = 6; // ユーザー権限
  string thumbnail_url = 7; // サムネイルURL
  string self_introduction = 8; // 自己紹介
  string last_name = 9; // 姓
  string first_name = 10; // 名
  string last_name_kana = 11; // 姓(かな)
  string first_name_kana = 12; // 名(かな)
  string created_at = 13; // 作成日時
  string updated_at = 14; // 更新日時
}

message UserListResponse {
  message User {
    string id = 1; // ユーザーID
    string username = 2; // ユーザー名
    common.Gender gender = 3; // 性別
    string email = 4; // メールアドレス
    string phone_number = 5; // 電話番号
    common.Role role = 6; // ユーザー権限
    string thumbnail_url = 7; // サムネイルURL
    string self_introduction = 8; // 自己紹介
    string last_name = 9; // 姓
    string first_name = 10; // 名
    string last_name_kana = 11; // 姓(かな)
    string first_name_kana = 12; // 名(かな)
    string created_at = 13; // 作成日時
    string updated_at = 14; // 更新日時
  }
  repeated User users = 1; // ユーザー一覧
  int64 limit = 2; // 取得上限
  int64 offset = 3; // 取得開始位置
  int64 total = 4; // 条件一致数
}

message UserMapResponse {
  message User {
    string id = 1; // ユーザーID
    string username = 2; // ユーザー名
    common.Gender gender = 3; // 性別
    string email = 4; // メールアドレス
    string phone_number = 5; // 電話番号
    common.Role role = 6; // ユーザー権限
    string thumbnail_url = 7; // サムネイルURL
    string self_introduction = 8; // 自己紹介
    string last_name = 9; // 姓
    string first_name = 10; // 名
    string last_name_kana = 11; // 姓(かな)
    string first_name_kana = 12; // 名(かな)
    string created_at = 13; // 作成日時
    string updated_at = 14; // 更新日時
  }
  map<string, User> users = 1; // ユーザー一覧
}

message UserProfileResponse {
  string id = 1; // ユーザーID
  string username = 2; // ユーザー名
  string thumbnail_url = 3; // サムネイルURL
  string self_introduction = 4; // 自己紹介
  bool is_follow = 5; // (自分が)フォローしているか
  bool is_follower = 6; // (自分が)フォローされているか
  int64 follow_count = 7; // (このユーザーの)フォロー数
  int64 follower_count = 8; // (このユーザーの)フォロワー数
}

message FollowListResponse {
  message Follow {
    string id = 1; // ユーザーID
    string username = 2; // ユーザー名
    string thumbnail_url = 3; // サムネイルURL
    string self_introduction = 4; // 自己紹介
    bool is_follow = 5; // (自分が)フォローしているか
  }
  repeated Follow follows = 1; // フォロー一覧
  int64 limit = 2; // 取得上限
  int64 offset = 3; // 取得開始位置
  int64 total = 4; // 条件一致数
}

message FollowerListResponse {
  message Follower {
    string id = 1; // ユーザーID
    string username = 2; // ユーザー名
    string thumbnail_url = 3; // サムネイルURL
    string self_introduction = 4; // 自己紹介
    bool is_follow = 5; // (自分が)フォローしているか
  }
  repeated Follower followers = 1; // フォロワー一覧
  int64 limit = 2; // 取得上限
  int64 offset = 3; // 取得開始位置
  int64 total = 4; // 条件一致数
}
