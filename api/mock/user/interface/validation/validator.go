// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mock_validation is a generated GoMock package.
package mock_validation

import (
	reflect "reflect"

	chat "github.com/calmato/gran-book/api/proto/chat"
	user "github.com/calmato/gran-book/api/proto/user"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthRequestValidation is a mock of AuthRequestValidation interface.
type MockAuthRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRequestValidationMockRecorder
}

// MockAuthRequestValidationMockRecorder is the mock recorder for MockAuthRequestValidation.
type MockAuthRequestValidationMockRecorder struct {
	mock *MockAuthRequestValidation
}

// NewMockAuthRequestValidation creates a new mock instance.
func NewMockAuthRequestValidation(ctrl *gomock.Controller) *MockAuthRequestValidation {
	mock := &MockAuthRequestValidation{ctrl: ctrl}
	mock.recorder = &MockAuthRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRequestValidation) EXPECT() *MockAuthRequestValidationMockRecorder {
	return m.recorder
}

// CreateAuth mocks base method.
func (m *MockAuthRequestValidation) CreateAuth(req *user.CreateAuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuth", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuth indicates an expected call of CreateAuth.
func (mr *MockAuthRequestValidationMockRecorder) CreateAuth(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuth", reflect.TypeOf((*MockAuthRequestValidation)(nil).CreateAuth), req)
}

// RegisterAuthDevice mocks base method.
func (m *MockAuthRequestValidation) RegisterAuthDevice(req *user.RegisterAuthDeviceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAuthDevice", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAuthDevice indicates an expected call of RegisterAuthDevice.
func (mr *MockAuthRequestValidationMockRecorder) RegisterAuthDevice(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAuthDevice", reflect.TypeOf((*MockAuthRequestValidation)(nil).RegisterAuthDevice), req)
}

// UpdateAuthAddress mocks base method.
func (m *MockAuthRequestValidation) UpdateAuthAddress(req *user.UpdateAuthAddressRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthAddress", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthAddress indicates an expected call of UpdateAuthAddress.
func (mr *MockAuthRequestValidationMockRecorder) UpdateAuthAddress(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthAddress", reflect.TypeOf((*MockAuthRequestValidation)(nil).UpdateAuthAddress), req)
}

// UpdateAuthEmail mocks base method.
func (m *MockAuthRequestValidation) UpdateAuthEmail(req *user.UpdateAuthEmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthEmail", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthEmail indicates an expected call of UpdateAuthEmail.
func (mr *MockAuthRequestValidationMockRecorder) UpdateAuthEmail(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthEmail", reflect.TypeOf((*MockAuthRequestValidation)(nil).UpdateAuthEmail), req)
}

// UpdateAuthPassword mocks base method.
func (m *MockAuthRequestValidation) UpdateAuthPassword(req *user.UpdateAuthPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthPassword indicates an expected call of UpdateAuthPassword.
func (mr *MockAuthRequestValidationMockRecorder) UpdateAuthPassword(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthPassword", reflect.TypeOf((*MockAuthRequestValidation)(nil).UpdateAuthPassword), req)
}

// UpdateAuthProfile mocks base method.
func (m *MockAuthRequestValidation) UpdateAuthProfile(req *user.UpdateAuthProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthProfile", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthProfile indicates an expected call of UpdateAuthProfile.
func (mr *MockAuthRequestValidationMockRecorder) UpdateAuthProfile(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthProfile", reflect.TypeOf((*MockAuthRequestValidation)(nil).UpdateAuthProfile), req)
}

// UploadAuthThumbnail mocks base method.
func (m *MockAuthRequestValidation) UploadAuthThumbnail(req *user.UploadAuthThumbnailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAuthThumbnail", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAuthThumbnail indicates an expected call of UploadAuthThumbnail.
func (mr *MockAuthRequestValidationMockRecorder) UploadAuthThumbnail(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAuthThumbnail", reflect.TypeOf((*MockAuthRequestValidation)(nil).UploadAuthThumbnail), req)
}

// MockUserRequestValidation is a mock of UserRequestValidation interface.
type MockUserRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockUserRequestValidationMockRecorder
}

// MockUserRequestValidationMockRecorder is the mock recorder for MockUserRequestValidation.
type MockUserRequestValidationMockRecorder struct {
	mock *MockUserRequestValidation
}

// NewMockUserRequestValidation creates a new mock instance.
func NewMockUserRequestValidation(ctrl *gomock.Controller) *MockUserRequestValidation {
	mock := &MockUserRequestValidation{ctrl: ctrl}
	mock.recorder = &MockUserRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRequestValidation) EXPECT() *MockUserRequestValidationMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockUserRequestValidation) Follow(req *user.FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockUserRequestValidationMockRecorder) Follow(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUserRequestValidation)(nil).Follow), req)
}

// GetUser mocks base method.
func (m *MockUserRequestValidation) GetUser(req *user.GetUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRequestValidationMockRecorder) GetUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRequestValidation)(nil).GetUser), req)
}

// GetUserProfile mocks base method.
func (m *MockUserRequestValidation) GetUserProfile(req *user.GetUserProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserRequestValidationMockRecorder) GetUserProfile(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserRequestValidation)(nil).GetUserProfile), req)
}

// ListFollow mocks base method.
func (m *MockUserRequestValidation) ListFollow(req *user.ListFollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollow", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFollow indicates an expected call of ListFollow.
func (mr *MockUserRequestValidationMockRecorder) ListFollow(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollow", reflect.TypeOf((*MockUserRequestValidation)(nil).ListFollow), req)
}

// ListFollower mocks base method.
func (m *MockUserRequestValidation) ListFollower(req *user.ListFollowerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollower", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFollower indicates an expected call of ListFollower.
func (mr *MockUserRequestValidationMockRecorder) ListFollower(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollower", reflect.TypeOf((*MockUserRequestValidation)(nil).ListFollower), req)
}

// ListUser mocks base method.
func (m *MockUserRequestValidation) ListUser(req *user.ListUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUser indicates an expected call of ListUser.
func (mr *MockUserRequestValidationMockRecorder) ListUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockUserRequestValidation)(nil).ListUser), req)
}

// MultiGetUser mocks base method.
func (m *MockUserRequestValidation) MultiGetUser(req *user.MultiGetUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiGetUser indicates an expected call of MultiGetUser.
func (mr *MockUserRequestValidationMockRecorder) MultiGetUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetUser", reflect.TypeOf((*MockUserRequestValidation)(nil).MultiGetUser), req)
}

// Unfollow mocks base method.
func (m *MockUserRequestValidation) Unfollow(req *user.UnfollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUserRequestValidationMockRecorder) Unfollow(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUserRequestValidation)(nil).Unfollow), req)
}

// MockAdminRequestValidation is a mock of AdminRequestValidation interface.
type MockAdminRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRequestValidationMockRecorder
}

// MockAdminRequestValidationMockRecorder is the mock recorder for MockAdminRequestValidation.
type MockAdminRequestValidationMockRecorder struct {
	mock *MockAdminRequestValidation
}

// NewMockAdminRequestValidation creates a new mock instance.
func NewMockAdminRequestValidation(ctrl *gomock.Controller) *MockAdminRequestValidation {
	mock := &MockAdminRequestValidation{ctrl: ctrl}
	mock.recorder = &MockAdminRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRequestValidation) EXPECT() *MockAdminRequestValidationMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockAdminRequestValidation) CreateAdmin(req *user.CreateAdminRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminRequestValidationMockRecorder) CreateAdmin(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminRequestValidation)(nil).CreateAdmin), req)
}

// DeleteAdmin mocks base method.
func (m *MockAdminRequestValidation) DeleteAdmin(req *user.DeleteAdminRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockAdminRequestValidationMockRecorder) DeleteAdmin(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockAdminRequestValidation)(nil).DeleteAdmin), req)
}

// GetAdmin mocks base method.
func (m *MockAdminRequestValidation) GetAdmin(req *user.GetAdminRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockAdminRequestValidationMockRecorder) GetAdmin(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockAdminRequestValidation)(nil).GetAdmin), req)
}

// ListAdmin mocks base method.
func (m *MockAdminRequestValidation) ListAdmin(req *user.ListAdminRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmin", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAdmin indicates an expected call of ListAdmin.
func (mr *MockAdminRequestValidationMockRecorder) ListAdmin(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmin", reflect.TypeOf((*MockAdminRequestValidation)(nil).ListAdmin), req)
}

// UpdateAdminContact mocks base method.
func (m *MockAdminRequestValidation) UpdateAdminContact(req *user.UpdateAdminContactRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminContact", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminContact indicates an expected call of UpdateAdminContact.
func (mr *MockAdminRequestValidationMockRecorder) UpdateAdminContact(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminContact", reflect.TypeOf((*MockAdminRequestValidation)(nil).UpdateAdminContact), req)
}

// UpdateAdminPassword mocks base method.
func (m *MockAdminRequestValidation) UpdateAdminPassword(req *user.UpdateAdminPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminPassword indicates an expected call of UpdateAdminPassword.
func (mr *MockAdminRequestValidationMockRecorder) UpdateAdminPassword(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminPassword", reflect.TypeOf((*MockAdminRequestValidation)(nil).UpdateAdminPassword), req)
}

// UpdateAdminProfile mocks base method.
func (m *MockAdminRequestValidation) UpdateAdminProfile(req *user.UpdateAdminProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminProfile", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminProfile indicates an expected call of UpdateAdminProfile.
func (mr *MockAdminRequestValidationMockRecorder) UpdateAdminProfile(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminProfile", reflect.TypeOf((*MockAdminRequestValidation)(nil).UpdateAdminProfile), req)
}

// UploadAdminThumbnail mocks base method.
func (m *MockAdminRequestValidation) UploadAdminThumbnail(req *user.UploadAdminThumbnailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAdminThumbnail", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAdminThumbnail indicates an expected call of UploadAdminThumbnail.
func (mr *MockAdminRequestValidationMockRecorder) UploadAdminThumbnail(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAdminThumbnail", reflect.TypeOf((*MockAdminRequestValidation)(nil).UploadAdminThumbnail), req)
}

// MockChatRequestValidation is a mock of ChatRequestValidation interface.
type MockChatRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockChatRequestValidationMockRecorder
}

// MockChatRequestValidationMockRecorder is the mock recorder for MockChatRequestValidation.
type MockChatRequestValidationMockRecorder struct {
	mock *MockChatRequestValidation
}

// NewMockChatRequestValidation creates a new mock instance.
func NewMockChatRequestValidation(ctrl *gomock.Controller) *MockChatRequestValidation {
	mock := &MockChatRequestValidation{ctrl: ctrl}
	mock.recorder = &MockChatRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRequestValidation) EXPECT() *MockChatRequestValidationMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockChatRequestValidation) CreateMessage(req *chat.CreateMessageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockChatRequestValidationMockRecorder) CreateMessage(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockChatRequestValidation)(nil).CreateMessage), req)
}

// CreateRoom mocks base method.
func (m *MockChatRequestValidation) CreateRoom(req *chat.CreateRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockChatRequestValidationMockRecorder) CreateRoom(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockChatRequestValidation)(nil).CreateRoom), req)
}

// ListRoom mocks base method.
func (m *MockChatRequestValidation) ListRoom(req *chat.ListRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoom", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoom indicates an expected call of ListRoom.
func (mr *MockChatRequestValidationMockRecorder) ListRoom(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoom", reflect.TypeOf((*MockChatRequestValidation)(nil).ListRoom), req)
}

// UploadChatImage mocks base method.
func (m *MockChatRequestValidation) UploadChatImage(req *chat.UploadChatImageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadChatImage", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadChatImage indicates an expected call of UploadChatImage.
func (mr *MockChatRequestValidationMockRecorder) UploadChatImage(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChatImage", reflect.TypeOf((*MockChatRequestValidation)(nil).UploadChatImage), req)
}
