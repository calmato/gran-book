// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/information/inquiry_service_grpc.pb.go

// Package mock_information is a generated GoMock package.
package mock_information

import (
	context "context"
	reflect "reflect"

	information "github.com/calmato/gran-book/api/proto/information"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInquiryServiceClient is a mock of InquiryServiceClient interface.
type MockInquiryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInquiryServiceClientMockRecorder
}

// MockInquiryServiceClientMockRecorder is the mock recorder for MockInquiryServiceClient.
type MockInquiryServiceClientMockRecorder struct {
	mock *MockInquiryServiceClient
}

// NewMockInquiryServiceClient creates a new mock instance.
func NewMockInquiryServiceClient(ctrl *gomock.Controller) *MockInquiryServiceClient {
	mock := &MockInquiryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInquiryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInquiryServiceClient) EXPECT() *MockInquiryServiceClientMockRecorder {
	return m.recorder
}

// CreateInquiry mocks base method.
func (m *MockInquiryServiceClient) CreateInquiry(ctx context.Context, in *information.CreateInquiryRequest, opts ...grpc.CallOption) (*information.InquiryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInquiry", varargs...)
	ret0, _ := ret[0].(*information.InquiryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInquiry indicates an expected call of CreateInquiry.
func (mr *MockInquiryServiceClientMockRecorder) CreateInquiry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInquiry", reflect.TypeOf((*MockInquiryServiceClient)(nil).CreateInquiry), varargs...)
}

// MockInquiryServiceServer is a mock of InquiryServiceServer interface.
type MockInquiryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInquiryServiceServerMockRecorder
}

// MockInquiryServiceServerMockRecorder is the mock recorder for MockInquiryServiceServer.
type MockInquiryServiceServerMockRecorder struct {
	mock *MockInquiryServiceServer
}

// NewMockInquiryServiceServer creates a new mock instance.
func NewMockInquiryServiceServer(ctrl *gomock.Controller) *MockInquiryServiceServer {
	mock := &MockInquiryServiceServer{ctrl: ctrl}
	mock.recorder = &MockInquiryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInquiryServiceServer) EXPECT() *MockInquiryServiceServerMockRecorder {
	return m.recorder
}

// CreateInquiry mocks base method.
func (m *MockInquiryServiceServer) CreateInquiry(arg0 context.Context, arg1 *information.CreateInquiryRequest) (*information.InquiryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInquiry", arg0, arg1)
	ret0, _ := ret[0].(*information.InquiryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInquiry indicates an expected call of CreateInquiry.
func (mr *MockInquiryServiceServerMockRecorder) CreateInquiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInquiry", reflect.TypeOf((*MockInquiryServiceServer)(nil).CreateInquiry), arg0, arg1)
}

// mustEmbedUnimplementedInquiryServiceServer mocks base method.
func (m *MockInquiryServiceServer) mustEmbedUnimplementedInquiryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInquiryServiceServer")
}

// mustEmbedUnimplementedInquiryServiceServer indicates an expected call of mustEmbedUnimplementedInquiryServiceServer.
func (mr *MockInquiryServiceServerMockRecorder) mustEmbedUnimplementedInquiryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInquiryServiceServer", reflect.TypeOf((*MockInquiryServiceServer)(nil).mustEmbedUnimplementedInquiryServiceServer))
}

// MockUnsafeInquiryServiceServer is a mock of UnsafeInquiryServiceServer interface.
type MockUnsafeInquiryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInquiryServiceServerMockRecorder
}

// MockUnsafeInquiryServiceServerMockRecorder is the mock recorder for MockUnsafeInquiryServiceServer.
type MockUnsafeInquiryServiceServerMockRecorder struct {
	mock *MockUnsafeInquiryServiceServer
}

// NewMockUnsafeInquiryServiceServer creates a new mock instance.
func NewMockUnsafeInquiryServiceServer(ctrl *gomock.Controller) *MockUnsafeInquiryServiceServer {
	mock := &MockUnsafeInquiryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInquiryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInquiryServiceServer) EXPECT() *MockUnsafeInquiryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInquiryServiceServer mocks base method.
func (m *MockUnsafeInquiryServiceServer) mustEmbedUnimplementedInquiryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInquiryServiceServer")
}

// mustEmbedUnimplementedInquiryServiceServer indicates an expected call of mustEmbedUnimplementedInquiryServiceServer.
func (mr *MockUnsafeInquiryServiceServerMockRecorder) mustEmbedUnimplementedInquiryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInquiryServiceServer", reflect.TypeOf((*MockUnsafeInquiryServiceServer)(nil).mustEmbedUnimplementedInquiryServiceServer))
}
