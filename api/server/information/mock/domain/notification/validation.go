// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/notification/validation.go

// Package mock_notification is a generated GoMock package.
package mock_notification

import (
	context "context"
	reflect "reflect"

	notification "github.com/calmato/gran-book/api/server/information/internal/domain/notification"
	gomock "github.com/golang/mock/gomock"
)

// MockValidation is a mock of Validation interface.
type MockValidation struct {
	ctrl     *gomock.Controller
	recorder *MockValidationMockRecorder
}

// MockValidationMockRecorder is the mock recorder for MockValidation.
type MockValidationMockRecorder struct {
	mock *MockValidation
}

// NewMockValidation creates a new mock instance.
func NewMockValidation(ctrl *gomock.Controller) *MockValidation {
	mock := &MockValidation{ctrl: ctrl}
	mock.recorder = &MockValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidation) EXPECT() *MockValidationMockRecorder {
	return m.recorder
}

// Notification mocks base method.
func (m *MockValidation) Notification(ctx context.Context, n *notification.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notification", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notification indicates an expected call of Notification.
func (mr *MockValidationMockRecorder) Notification(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notification", reflect.TypeOf((*MockValidation)(nil).Notification), ctx, n)
}
