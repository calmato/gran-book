// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interface/validation/book.go

// Package mock_validation is a generated GoMock package.
package mock_validation

import (
	reflect "reflect"

	proto "github.com/calmato/gran-book/api/server/book/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockBookRequestValidation is a mock of BookRequestValidation interface.
type MockBookRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockBookRequestValidationMockRecorder
}

// MockBookRequestValidationMockRecorder is the mock recorder for MockBookRequestValidation.
type MockBookRequestValidationMockRecorder struct {
	mock *MockBookRequestValidation
}

// NewMockBookRequestValidation creates a new mock instance.
func NewMockBookRequestValidation(ctrl *gomock.Controller) *MockBookRequestValidation {
	mock := &MockBookRequestValidation{ctrl: ctrl}
	mock.recorder = &MockBookRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRequestValidation) EXPECT() *MockBookRequestValidationMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookRequestValidation) CreateBook(req *proto.CreateBookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRequestValidationMockRecorder) CreateBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRequestValidation)(nil).CreateBook), req)
}

// DeleteBook mocks base method.
func (m *MockBookRequestValidation) DeleteBook(req *proto.DeleteBookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookRequestValidationMockRecorder) DeleteBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookRequestValidation)(nil).DeleteBook), req)
}

// DeleteBookshelf mocks base method.
func (m *MockBookRequestValidation) DeleteBookshelf(req *proto.DeleteBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookshelf indicates an expected call of DeleteBookshelf.
func (mr *MockBookRequestValidationMockRecorder) DeleteBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).DeleteBookshelf), req)
}

// GetBook mocks base method.
func (m *MockBookRequestValidation) GetBook(req *proto.GetBookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookRequestValidationMockRecorder) GetBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookRequestValidation)(nil).GetBook), req)
}

// GetBookByIsbn mocks base method.
func (m *MockBookRequestValidation) GetBookByIsbn(req *proto.GetBookByIsbnRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByIsbn", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBookByIsbn indicates an expected call of GetBookByIsbn.
func (mr *MockBookRequestValidationMockRecorder) GetBookByIsbn(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByIsbn", reflect.TypeOf((*MockBookRequestValidation)(nil).GetBookByIsbn), req)
}

// GetBookshelf mocks base method.
func (m *MockBookRequestValidation) GetBookshelf(req *proto.GetBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBookshelf indicates an expected call of GetBookshelf.
func (mr *MockBookRequestValidationMockRecorder) GetBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).GetBookshelf), req)
}

// GetReview mocks base method.
func (m *MockBookRequestValidation) GetReview(req *proto.GetReviewRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReview indicates an expected call of GetReview.
func (mr *MockBookRequestValidationMockRecorder) GetReview(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockBookRequestValidation)(nil).GetReview), req)
}

// ListBookReview mocks base method.
func (m *MockBookRequestValidation) ListBookReview(req *proto.ListBookReviewRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookReview", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBookReview indicates an expected call of ListBookReview.
func (mr *MockBookRequestValidationMockRecorder) ListBookReview(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookReview", reflect.TypeOf((*MockBookRequestValidation)(nil).ListBookReview), req)
}

// ListBookshelf mocks base method.
func (m *MockBookRequestValidation) ListBookshelf(req *proto.ListBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBookshelf indicates an expected call of ListBookshelf.
func (mr *MockBookRequestValidationMockRecorder) ListBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).ListBookshelf), req)
}

// ListUserMonthlyResult mocks base method.
func (m *MockBookRequestValidation) ListUserMonthlyResult(req *proto.ListUserMonthlyResultRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserMonthlyResult", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserMonthlyResult indicates an expected call of ListUserMonthlyResult.
func (mr *MockBookRequestValidationMockRecorder) ListUserMonthlyResult(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserMonthlyResult", reflect.TypeOf((*MockBookRequestValidation)(nil).ListUserMonthlyResult), req)
}

// ListUserReview mocks base method.
func (m *MockBookRequestValidation) ListUserReview(req *proto.ListUserReviewRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserReview", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserReview indicates an expected call of ListUserReview.
func (mr *MockBookRequestValidationMockRecorder) ListUserReview(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserReview", reflect.TypeOf((*MockBookRequestValidation)(nil).ListUserReview), req)
}

// MultiGetBooks mocks base method.
func (m *MockBookRequestValidation) MultiGetBooks(req *proto.MultiGetBooksRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetBooks", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiGetBooks indicates an expected call of MultiGetBooks.
func (mr *MockBookRequestValidationMockRecorder) MultiGetBooks(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetBooks", reflect.TypeOf((*MockBookRequestValidation)(nil).MultiGetBooks), req)
}

// ReadBookshelf mocks base method.
func (m *MockBookRequestValidation) ReadBookshelf(req *proto.ReadBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadBookshelf indicates an expected call of ReadBookshelf.
func (mr *MockBookRequestValidationMockRecorder) ReadBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).ReadBookshelf), req)
}

// ReadingBookshelf mocks base method.
func (m *MockBookRequestValidation) ReadingBookshelf(req *proto.ReadingBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadingBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadingBookshelf indicates an expected call of ReadingBookshelf.
func (mr *MockBookRequestValidationMockRecorder) ReadingBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadingBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).ReadingBookshelf), req)
}

// ReleaseBookshelf mocks base method.
func (m *MockBookRequestValidation) ReleaseBookshelf(req *proto.ReleaseBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseBookshelf indicates an expected call of ReleaseBookshelf.
func (mr *MockBookRequestValidationMockRecorder) ReleaseBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).ReleaseBookshelf), req)
}

// StackedBookshelf mocks base method.
func (m *MockBookRequestValidation) StackedBookshelf(req *proto.StackedBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackedBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// StackedBookshelf indicates an expected call of StackedBookshelf.
func (mr *MockBookRequestValidationMockRecorder) StackedBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackedBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).StackedBookshelf), req)
}

// UpdateBook mocks base method.
func (m *MockBookRequestValidation) UpdateBook(req *proto.UpdateBookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRequestValidationMockRecorder) UpdateBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRequestValidation)(nil).UpdateBook), req)
}

// WantBookshelf mocks base method.
func (m *MockBookRequestValidation) WantBookshelf(req *proto.WantBookshelfRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WantBookshelf", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WantBookshelf indicates an expected call of WantBookshelf.
func (mr *MockBookRequestValidationMockRecorder) WantBookshelf(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WantBookshelf", reflect.TypeOf((*MockBookRequestValidation)(nil).WantBookshelf), req)
}
