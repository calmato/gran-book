// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/book/service.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	context "context"
	domain "github.com/calmato/gran-book/api/server/book/internal/domain"
	book "github.com/calmato/gran-book/api/server/book/internal/domain/book"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockService) List(ctx context.Context, q *domain.ListQuery) ([]*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, q)
	ret0, _ := ret[0].([]*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServiceMockRecorder) List(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx, q)
}

// ListBookshelf mocks base method
func (m *MockService) ListBookshelf(ctx context.Context, q *domain.ListQuery) ([]*book.Bookshelf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookshelf", ctx, q)
	ret0, _ := ret[0].([]*book.Bookshelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookshelf indicates an expected call of ListBookshelf
func (mr *MockServiceMockRecorder) ListBookshelf(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookshelf", reflect.TypeOf((*MockService)(nil).ListBookshelf), ctx, q)
}

// ListCount mocks base method
func (m *MockService) ListCount(ctx context.Context, q *domain.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCount", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCount indicates an expected call of ListCount
func (mr *MockServiceMockRecorder) ListCount(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCount", reflect.TypeOf((*MockService)(nil).ListCount), ctx, q)
}

// ListBookshelfCount mocks base method
func (m *MockService) ListBookshelfCount(ctx context.Context, q *domain.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookshelfCount", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookshelfCount indicates an expected call of ListBookshelfCount
func (mr *MockServiceMockRecorder) ListBookshelfCount(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookshelfCount", reflect.TypeOf((*MockService)(nil).ListBookshelfCount), ctx, q)
}

// Show mocks base method
func (m *MockService) Show(ctx context.Context, bookID int) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", ctx, bookID)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show
func (mr *MockServiceMockRecorder) Show(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockService)(nil).Show), ctx, bookID)
}

// ShowByIsbn mocks base method
func (m *MockService) ShowByIsbn(ctx context.Context, isbn string) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowByIsbn", ctx, isbn)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowByIsbn indicates an expected call of ShowByIsbn
func (mr *MockServiceMockRecorder) ShowByIsbn(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowByIsbn", reflect.TypeOf((*MockService)(nil).ShowByIsbn), ctx, isbn)
}

// ShowBookshelfByUserIDAndBookID mocks base method
func (m *MockService) ShowBookshelfByUserIDAndBookID(ctx context.Context, userID string, bookID int) (*book.Bookshelf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowBookshelfByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(*book.Bookshelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowBookshelfByUserIDAndBookID indicates an expected call of ShowBookshelfByUserIDAndBookID
func (mr *MockServiceMockRecorder) ShowBookshelfByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowBookshelfByUserIDAndBookID", reflect.TypeOf((*MockService)(nil).ShowBookshelfByUserIDAndBookID), ctx, userID, bookID)
}

// ShowReviewByUserIDAndBookID mocks base method
func (m *MockService) ShowReviewByUserIDAndBookID(ctx context.Context, userID string, bookID int) (*book.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowReviewByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(*book.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowReviewByUserIDAndBookID indicates an expected call of ShowReviewByUserIDAndBookID
func (mr *MockServiceMockRecorder) ShowReviewByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowReviewByUserIDAndBookID", reflect.TypeOf((*MockService)(nil).ShowReviewByUserIDAndBookID), ctx, userID, bookID)
}

// Create mocks base method
func (m *MockService) Create(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, b)
}

// CreateBookshelf mocks base method
func (m *MockService) CreateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookshelf indicates an expected call of CreateBookshelf
func (mr *MockServiceMockRecorder) CreateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookshelf", reflect.TypeOf((*MockService)(nil).CreateBookshelf), ctx, b)
}

// Update mocks base method
func (m *MockService) Update(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockServiceMockRecorder) Update(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, b)
}

// UpdateBookshelf mocks base method
func (m *MockService) UpdateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookshelf indicates an expected call of UpdateBookshelf
func (mr *MockServiceMockRecorder) UpdateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookshelf", reflect.TypeOf((*MockService)(nil).UpdateBookshelf), ctx, b)
}

// MultipleCreate mocks base method
func (m *MockService) MultipleCreate(ctx context.Context, bs []*book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleCreate", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleCreate indicates an expected call of MultipleCreate
func (mr *MockServiceMockRecorder) MultipleCreate(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCreate", reflect.TypeOf((*MockService)(nil).MultipleCreate), ctx, bs)
}

// MultipleUpdate mocks base method
func (m *MockService) MultipleUpdate(ctx context.Context, bs []*book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleUpdate", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleUpdate indicates an expected call of MultipleUpdate
func (mr *MockServiceMockRecorder) MultipleUpdate(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleUpdate", reflect.TypeOf((*MockService)(nil).MultipleUpdate), ctx, bs)
}

// Delete mocks base method
func (m *MockService) Delete(ctx context.Context, bookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, bookID)
}

// DeleteBookshelf mocks base method
func (m *MockService) DeleteBookshelf(ctx context.Context, bookshelfID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookshelf", ctx, bookshelfID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookshelf indicates an expected call of DeleteBookshelf
func (mr *MockServiceMockRecorder) DeleteBookshelf(ctx, bookshelfID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookshelf", reflect.TypeOf((*MockService)(nil).DeleteBookshelf), ctx, bookshelfID)
}

// Validation mocks base method
func (m *MockService) Validation(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validation", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validation indicates an expected call of Validation
func (mr *MockServiceMockRecorder) Validation(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validation", reflect.TypeOf((*MockService)(nil).Validation), ctx, b)
}

// ValidationAuthor mocks base method
func (m *MockService) ValidationAuthor(ctx context.Context, a *book.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationAuthor", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidationAuthor indicates an expected call of ValidationAuthor
func (mr *MockServiceMockRecorder) ValidationAuthor(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationAuthor", reflect.TypeOf((*MockService)(nil).ValidationAuthor), ctx, a)
}

// ValidationBookshelf mocks base method
func (m *MockService) ValidationBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidationBookshelf indicates an expected call of ValidationBookshelf
func (mr *MockServiceMockRecorder) ValidationBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationBookshelf", reflect.TypeOf((*MockService)(nil).ValidationBookshelf), ctx, b)
}

// ValidationReview mocks base method
func (m *MockService) ValidationReview(ctx context.Context, b *book.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationReview", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidationReview indicates an expected call of ValidationReview
func (mr *MockServiceMockRecorder) ValidationReview(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationReview", reflect.TypeOf((*MockService)(nil).ValidationReview), ctx, b)
}
