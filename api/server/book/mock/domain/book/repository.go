// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/book/repository.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	context "context"
	book "github.com/calmato/gran-book/api/server/book/internal/domain/book"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListAuthorByBookID mocks base method
func (m *MockRepository) ListAuthorByBookID(ctx context.Context, bookID int) ([]*book.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthorByBookID", ctx, bookID)
	ret0, _ := ret[0].([]*book.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorByBookID indicates an expected call of ListAuthorByBookID
func (mr *MockRepositoryMockRecorder) ListAuthorByBookID(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorByBookID", reflect.TypeOf((*MockRepository)(nil).ListAuthorByBookID), ctx, bookID)
}

// Show mocks base method
func (m *MockRepository) Show(ctx context.Context, bookID int) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", ctx, bookID)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show
func (mr *MockRepositoryMockRecorder) Show(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockRepository)(nil).Show), ctx, bookID)
}

// ShowByIsbn mocks base method
func (m *MockRepository) ShowByIsbn(ctx context.Context, isbn string) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowByIsbn", ctx, isbn)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowByIsbn indicates an expected call of ShowByIsbn
func (mr *MockRepositoryMockRecorder) ShowByIsbn(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowByIsbn", reflect.TypeOf((*MockRepository)(nil).ShowByIsbn), ctx, isbn)
}

// ShowBookshelfByUserIDAndBookID mocks base method
func (m *MockRepository) ShowBookshelfByUserIDAndBookID(ctx context.Context, userID string, bookID int) (*book.Bookshelf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowBookshelfByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(*book.Bookshelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowBookshelfByUserIDAndBookID indicates an expected call of ShowBookshelfByUserIDAndBookID
func (mr *MockRepositoryMockRecorder) ShowBookshelfByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowBookshelfByUserIDAndBookID", reflect.TypeOf((*MockRepository)(nil).ShowBookshelfByUserIDAndBookID), ctx, userID, bookID)
}

// ShowOrCreateAuthor mocks base method
func (m *MockRepository) ShowOrCreateAuthor(ctx context.Context, a *book.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowOrCreateAuthor", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowOrCreateAuthor indicates an expected call of ShowOrCreateAuthor
func (mr *MockRepositoryMockRecorder) ShowOrCreateAuthor(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowOrCreateAuthor", reflect.TypeOf((*MockRepository)(nil).ShowOrCreateAuthor), ctx, a)
}

// Create mocks base method
func (m *MockRepository) Create(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, b)
}

// CreateBookshelf mocks base method
func (m *MockRepository) CreateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookshelf indicates an expected call of CreateBookshelf
func (mr *MockRepositoryMockRecorder) CreateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookshelf", reflect.TypeOf((*MockRepository)(nil).CreateBookshelf), ctx, b)
}

// Update mocks base method
func (m *MockRepository) Update(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, b)
}

// UpdateBookshelf mocks base method
func (m *MockRepository) UpdateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookshelf indicates an expected call of UpdateBookshelf
func (mr *MockRepositoryMockRecorder) UpdateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookshelf", reflect.TypeOf((*MockRepository)(nil).UpdateBookshelf), ctx, b)
}

// MultipleCreate mocks base method
func (m *MockRepository) MultipleCreate(ctx context.Context, bs []*book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleCreate", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleCreate indicates an expected call of MultipleCreate
func (mr *MockRepositoryMockRecorder) MultipleCreate(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCreate", reflect.TypeOf((*MockRepository)(nil).MultipleCreate), ctx, bs)
}

// MultipleUpdate mocks base method
func (m *MockRepository) MultipleUpdate(ctx context.Context, bs []*book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleUpdate", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleUpdate indicates an expected call of MultipleUpdate
func (mr *MockRepositoryMockRecorder) MultipleUpdate(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleUpdate", reflect.TypeOf((*MockRepository)(nil).MultipleUpdate), ctx, bs)
}

// GetIDByIsbn mocks base method
func (m *MockRepository) GetIDByIsbn(ctx context.Context, isbn string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByIsbn", ctx, isbn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByIsbn indicates an expected call of GetIDByIsbn
func (mr *MockRepositoryMockRecorder) GetIDByIsbn(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByIsbn", reflect.TypeOf((*MockRepository)(nil).GetIDByIsbn), ctx, isbn)
}

// GetBookshelfIDByUserIDAndBookID mocks base method
func (m *MockRepository) GetBookshelfIDByUserIDAndBookID(ctx context.Context, userID string, bookID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookshelfIDByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookshelfIDByUserIDAndBookID indicates an expected call of GetBookshelfIDByUserIDAndBookID
func (mr *MockRepositoryMockRecorder) GetBookshelfIDByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookshelfIDByUserIDAndBookID", reflect.TypeOf((*MockRepository)(nil).GetBookshelfIDByUserIDAndBookID), ctx, userID, bookID)
}
