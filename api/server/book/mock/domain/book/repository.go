// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/book/repository.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	context "context"
	book "github.com/calmato/gran-book/api/server/book/internal/domain/book"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRepository) Create(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, b)
}

// CreateAuthor mocks base method
func (m *MockRepository) CreateAuthor(ctx context.Context, a *book.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthor indicates an expected call of CreateAuthor
func (mr *MockRepositoryMockRecorder) CreateAuthor(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockRepository)(nil).CreateAuthor), ctx, a)
}

// CreateBookshelf mocks base method
func (m *MockRepository) CreateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookshelf indicates an expected call of CreateBookshelf
func (mr *MockRepositoryMockRecorder) CreateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookshelf", reflect.TypeOf((*MockRepository)(nil).CreateBookshelf), ctx, b)
}

// CreateCategory mocks base method
func (m *MockRepository) CreateCategory(ctx context.Context, c *book.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockRepositoryMockRecorder) CreateCategory(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockRepository)(nil).CreateCategory), ctx, c)
}

// CreatePublisher mocks base method
func (m *MockRepository) CreatePublisher(ctx context.Context, p *book.Publisher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublisher", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePublisher indicates an expected call of CreatePublisher
func (mr *MockRepositoryMockRecorder) CreatePublisher(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublisher", reflect.TypeOf((*MockRepository)(nil).CreatePublisher), ctx, p)
}
