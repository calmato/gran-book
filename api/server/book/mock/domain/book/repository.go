// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/book/repository.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	context "context"
	reflect "reflect"

	book "github.com/calmato/gran-book/api/server/book/internal/domain/book"
	database "github.com/calmato/gran-book/api/server/book/pkg/database"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context, q *database.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx, q)
}

// CountBookshelf mocks base method.
func (m *MockRepository) CountBookshelf(ctx context.Context, q *database.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBookshelf", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBookshelf indicates an expected call of CountBookshelf.
func (mr *MockRepositoryMockRecorder) CountBookshelf(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBookshelf", reflect.TypeOf((*MockRepository)(nil).CountBookshelf), ctx, q)
}

// CountReview mocks base method.
func (m *MockRepository) CountReview(ctx context.Context, q *database.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountReview", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountReview indicates an expected call of CountReview.
func (mr *MockRepositoryMockRecorder) CountReview(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountReview", reflect.TypeOf((*MockRepository)(nil).CountReview), ctx, q)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, b)
}

// CreateAuthor mocks base method.
func (m *MockRepository) CreateAuthor(ctx context.Context, a *book.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockRepositoryMockRecorder) CreateAuthor(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockRepository)(nil).CreateAuthor), ctx, a)
}

// CreateBookshelf mocks base method.
func (m *MockRepository) CreateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookshelf indicates an expected call of CreateBookshelf.
func (mr *MockRepositoryMockRecorder) CreateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookshelf", reflect.TypeOf((*MockRepository)(nil).CreateBookshelf), ctx, b)
}

// CreateReview mocks base method.
func (m *MockRepository) CreateReview(ctx context.Context, rv *book.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, rv)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockRepositoryMockRecorder) CreateReview(ctx, rv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockRepository)(nil).CreateReview), ctx, rv)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, bookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, bookID)
}

// DeleteBookshelf mocks base method.
func (m *MockRepository) DeleteBookshelf(ctx context.Context, bookshelfID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookshelf", ctx, bookshelfID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookshelf indicates an expected call of DeleteBookshelf.
func (mr *MockRepositoryMockRecorder) DeleteBookshelf(ctx, bookshelfID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookshelf", reflect.TypeOf((*MockRepository)(nil).DeleteBookshelf), ctx, bookshelfID)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, bookID int) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, bookID)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, bookID)
}

// GetAuthorByName mocks base method.
func (m *MockRepository) GetAuthorByName(ctx context.Context, name string) (*book.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByName", ctx, name)
	ret0, _ := ret[0].(*book.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByName indicates an expected call of GetAuthorByName.
func (mr *MockRepositoryMockRecorder) GetAuthorByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByName", reflect.TypeOf((*MockRepository)(nil).GetAuthorByName), ctx, name)
}

// GetAuthorIDByName mocks base method.
func (m *MockRepository) GetAuthorIDByName(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorIDByName", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorIDByName indicates an expected call of GetAuthorIDByName.
func (mr *MockRepositoryMockRecorder) GetAuthorIDByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorIDByName", reflect.TypeOf((*MockRepository)(nil).GetAuthorIDByName), ctx, name)
}

// GetBookIDByIsbn mocks base method.
func (m *MockRepository) GetBookIDByIsbn(ctx context.Context, isbn string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookIDByIsbn", ctx, isbn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookIDByIsbn indicates an expected call of GetBookIDByIsbn.
func (mr *MockRepositoryMockRecorder) GetBookIDByIsbn(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookIDByIsbn", reflect.TypeOf((*MockRepository)(nil).GetBookIDByIsbn), ctx, isbn)
}

// GetBookshelfByUserIDAndBookID mocks base method.
func (m *MockRepository) GetBookshelfByUserIDAndBookID(ctx context.Context, userID string, bookID int) (*book.Bookshelf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookshelfByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(*book.Bookshelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookshelfByUserIDAndBookID indicates an expected call of GetBookshelfByUserIDAndBookID.
func (mr *MockRepositoryMockRecorder) GetBookshelfByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookshelfByUserIDAndBookID", reflect.TypeOf((*MockRepository)(nil).GetBookshelfByUserIDAndBookID), ctx, userID, bookID)
}

// GetBookshelfIDByUserIDAndBookID mocks base method.
func (m *MockRepository) GetBookshelfIDByUserIDAndBookID(ctx context.Context, userID string, bookID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookshelfIDByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookshelfIDByUserIDAndBookID indicates an expected call of GetBookshelfIDByUserIDAndBookID.
func (mr *MockRepositoryMockRecorder) GetBookshelfIDByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookshelfIDByUserIDAndBookID", reflect.TypeOf((*MockRepository)(nil).GetBookshelfIDByUserIDAndBookID), ctx, userID, bookID)
}

// GetByIsbn mocks base method.
func (m *MockRepository) GetByIsbn(ctx context.Context, isbn string) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIsbn", ctx, isbn)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIsbn indicates an expected call of GetByIsbn.
func (mr *MockRepositoryMockRecorder) GetByIsbn(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIsbn", reflect.TypeOf((*MockRepository)(nil).GetByIsbn), ctx, isbn)
}

// GetReview mocks base method.
func (m *MockRepository) GetReview(ctx context.Context, reviewID int) (*book.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", ctx, reviewID)
	ret0, _ := ret[0].(*book.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockRepositoryMockRecorder) GetReview(ctx, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockRepository)(nil).GetReview), ctx, reviewID)
}

// GetReviewByUserIDAndBookID mocks base method.
func (m *MockRepository) GetReviewByUserIDAndBookID(ctx context.Context, userID string, bookID int) (*book.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(*book.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByUserIDAndBookID indicates an expected call of GetReviewByUserIDAndBookID.
func (mr *MockRepositoryMockRecorder) GetReviewByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByUserIDAndBookID", reflect.TypeOf((*MockRepository)(nil).GetReviewByUserIDAndBookID), ctx, userID, bookID)
}

// GetReviewIDByUserIDAndBookID mocks base method.
func (m *MockRepository) GetReviewIDByUserIDAndBookID(ctx context.Context, userID string, bookID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewIDByUserIDAndBookID", ctx, userID, bookID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewIDByUserIDAndBookID indicates an expected call of GetReviewIDByUserIDAndBookID.
func (mr *MockRepositoryMockRecorder) GetReviewIDByUserIDAndBookID(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewIDByUserIDAndBookID", reflect.TypeOf((*MockRepository)(nil).GetReviewIDByUserIDAndBookID), ctx, userID, bookID)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, q *database.ListQuery) (book.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, q)
	ret0, _ := ret[0].(book.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, q)
}

// ListBookshelf mocks base method.
func (m *MockRepository) ListBookshelf(ctx context.Context, q *database.ListQuery) (book.Bookshelves, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookshelf", ctx, q)
	ret0, _ := ret[0].(book.Bookshelves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookshelf indicates an expected call of ListBookshelf.
func (mr *MockRepositoryMockRecorder) ListBookshelf(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookshelf", reflect.TypeOf((*MockRepository)(nil).ListBookshelf), ctx, q)
}

// ListReview mocks base method.
func (m *MockRepository) ListReview(ctx context.Context, q *database.ListQuery) (book.Reviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReview", ctx, q)
	ret0, _ := ret[0].(book.Reviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReview indicates an expected call of ListReview.
func (mr *MockRepositoryMockRecorder) ListReview(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReview", reflect.TypeOf((*MockRepository)(nil).ListReview), ctx, q)
}

// MultiGet mocks base method.
func (m *MockRepository) MultiGet(ctx context.Context, bookIDs []int) (book.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGet", ctx, bookIDs)
	ret0, _ := ret[0].(book.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockRepositoryMockRecorder) MultiGet(ctx, bookIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockRepository)(nil).MultiGet), ctx, bookIDs)
}

// MultipleCreate mocks base method.
func (m *MockRepository) MultipleCreate(ctx context.Context, bs book.Books) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleCreate", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleCreate indicates an expected call of MultipleCreate.
func (mr *MockRepositoryMockRecorder) MultipleCreate(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCreate", reflect.TypeOf((*MockRepository)(nil).MultipleCreate), ctx, bs)
}

// MultipleUpdate mocks base method.
func (m *MockRepository) MultipleUpdate(ctx context.Context, bs book.Books) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleUpdate", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleUpdate indicates an expected call of MultipleUpdate.
func (mr *MockRepositoryMockRecorder) MultipleUpdate(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleUpdate", reflect.TypeOf((*MockRepository)(nil).MultipleUpdate), ctx, bs)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, b *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, b)
}

// UpdateBookshelf mocks base method.
func (m *MockRepository) UpdateBookshelf(ctx context.Context, b *book.Bookshelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookshelf", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookshelf indicates an expected call of UpdateBookshelf.
func (mr *MockRepositoryMockRecorder) UpdateBookshelf(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookshelf", reflect.TypeOf((*MockRepository)(nil).UpdateBookshelf), ctx, b)
}

// UpdateReview mocks base method.
func (m *MockRepository) UpdateReview(ctx context.Context, rv *book.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, rv)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockRepositoryMockRecorder) UpdateReview(ctx, rv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockRepository)(nil).UpdateReview), ctx, rv)
}
