// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interface/validation/user.go

// Package mock_validation is a generated GoMock package.
package mock_validation

import (
	reflect "reflect"

	user "github.com/calmato/gran-book/api/server/user/proto/service/user"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRequestValidation is a mock of UserRequestValidation interface.
type MockUserRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockUserRequestValidationMockRecorder
}

// MockUserRequestValidationMockRecorder is the mock recorder for MockUserRequestValidation.
type MockUserRequestValidationMockRecorder struct {
	mock *MockUserRequestValidation
}

// NewMockUserRequestValidation creates a new mock instance.
func NewMockUserRequestValidation(ctrl *gomock.Controller) *MockUserRequestValidation {
	mock := &MockUserRequestValidation{ctrl: ctrl}
	mock.recorder = &MockUserRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRequestValidation) EXPECT() *MockUserRequestValidationMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockUserRequestValidation) Follow(req *user.FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockUserRequestValidationMockRecorder) Follow(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUserRequestValidation)(nil).Follow), req)
}

// GetUser mocks base method.
func (m *MockUserRequestValidation) GetUser(req *user.GetUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRequestValidationMockRecorder) GetUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRequestValidation)(nil).GetUser), req)
}

// GetUserProfile mocks base method.
func (m *MockUserRequestValidation) GetUserProfile(req *user.GetUserProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserRequestValidationMockRecorder) GetUserProfile(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserRequestValidation)(nil).GetUserProfile), req)
}

// ListFollow mocks base method.
func (m *MockUserRequestValidation) ListFollow(req *user.ListFollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollow", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFollow indicates an expected call of ListFollow.
func (mr *MockUserRequestValidationMockRecorder) ListFollow(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollow", reflect.TypeOf((*MockUserRequestValidation)(nil).ListFollow), req)
}

// ListFollower mocks base method.
func (m *MockUserRequestValidation) ListFollower(req *user.ListFollowerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollower", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFollower indicates an expected call of ListFollower.
func (mr *MockUserRequestValidationMockRecorder) ListFollower(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollower", reflect.TypeOf((*MockUserRequestValidation)(nil).ListFollower), req)
}

// ListUser mocks base method.
func (m *MockUserRequestValidation) ListUser(req *user.ListUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUser indicates an expected call of ListUser.
func (mr *MockUserRequestValidationMockRecorder) ListUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockUserRequestValidation)(nil).ListUser), req)
}

// MultiGetUser mocks base method.
func (m *MockUserRequestValidation) MultiGetUser(req *user.MultiGetUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiGetUser indicates an expected call of MultiGetUser.
func (mr *MockUserRequestValidationMockRecorder) MultiGetUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetUser", reflect.TypeOf((*MockUserRequestValidation)(nil).MultiGetUser), req)
}

// Unfollow mocks base method.
func (m *MockUserRequestValidation) Unfollow(req *user.UnfollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUserRequestValidationMockRecorder) Unfollow(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUserRequestValidation)(nil).Unfollow), req)
}
