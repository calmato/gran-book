// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/repository.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	user "github.com/calmato/gran-book/api/server/user/internal/domain/user"
	database "github.com/calmato/gran-book/api/server/user/pkg/database"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockRepository) Authentication(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication.
func (mr *MockRepositoryMockRecorder) Authentication(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockRepository)(nil).Authentication), ctx)
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context, q *database.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx, q)
}

// CountRelationship mocks base method.
func (m *MockRepository) CountRelationship(ctx context.Context, q *database.ListQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRelationship", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRelationship indicates an expected call of CountRelationship.
func (mr *MockRepositoryMockRecorder) CountRelationship(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRelationship", reflect.TypeOf((*MockRepository)(nil).CountRelationship), ctx, q)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, u)
}

// CreateRelationship mocks base method.
func (m *MockRepository) CreateRelationship(ctx context.Context, r *user.Relationship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelationship", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelationship indicates an expected call of CreateRelationship.
func (mr *MockRepositoryMockRecorder) CreateRelationship(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelationship", reflect.TypeOf((*MockRepository)(nil).CreateRelationship), ctx, r)
}

// CreateWithOAuth mocks base method.
func (m *MockRepository) CreateWithOAuth(ctx context.Context, u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithOAuth", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithOAuth indicates an expected call of CreateWithOAuth.
func (mr *MockRepositoryMockRecorder) CreateWithOAuth(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithOAuth", reflect.TypeOf((*MockRepository)(nil).CreateWithOAuth), ctx, u)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, userID)
}

// DeleteRelationship mocks base method.
func (m *MockRepository) DeleteRelationship(ctx context.Context, relationshipID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationship", ctx, relationshipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationship indicates an expected call of DeleteRelationship.
func (mr *MockRepositoryMockRecorder) DeleteRelationship(ctx, relationshipID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationship", reflect.TypeOf((*MockRepository)(nil).DeleteRelationship), ctx, relationshipID)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, userID string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, userID)
}

// GetAdmin mocks base method.
func (m *MockRepository) GetAdmin(ctx context.Context, userID string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", ctx, userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockRepositoryMockRecorder) GetAdmin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockRepository)(nil).GetAdmin), ctx, userID)
}

// GetRelationship mocks base method.
func (m *MockRepository) GetRelationship(ctx context.Context, followID, followerID string) (*user.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationship", ctx, followID, followerID)
	ret0, _ := ret[0].(*user.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationship indicates an expected call of GetRelationship.
func (mr *MockRepositoryMockRecorder) GetRelationship(ctx, followID, followerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationship", reflect.TypeOf((*MockRepository)(nil).GetRelationship), ctx, followID, followerID)
}

// GetRelationshipIDByUserID mocks base method.
func (m *MockRepository) GetRelationshipIDByUserID(ctx context.Context, followID, followerID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationshipIDByUserID", ctx, followID, followerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationshipIDByUserID indicates an expected call of GetRelationshipIDByUserID.
func (mr *MockRepositoryMockRecorder) GetRelationshipIDByUserID(ctx, followID, followerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationshipIDByUserID", reflect.TypeOf((*MockRepository)(nil).GetRelationshipIDByUserID), ctx, followID, followerID)
}

// GetUserIDByEmail mocks base method.
func (m *MockRepository) GetUserIDByEmail(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByEmail", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByEmail indicates an expected call of GetUserIDByEmail.
func (mr *MockRepositoryMockRecorder) GetUserIDByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserIDByEmail), ctx, email)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, q *database.ListQuery) (user.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, q)
	ret0, _ := ret[0].(user.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, q)
}

// ListFollow mocks base method.
func (m *MockRepository) ListFollow(ctx context.Context, q *database.ListQuery) (user.Follows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollow", ctx, q)
	ret0, _ := ret[0].(user.Follows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollow indicates an expected call of ListFollow.
func (mr *MockRepositoryMockRecorder) ListFollow(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollow", reflect.TypeOf((*MockRepository)(nil).ListFollow), ctx, q)
}

// ListFollowID mocks base method.
func (m *MockRepository) ListFollowID(ctx context.Context, userID string, userIDs ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFollowID", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowID indicates an expected call of ListFollowID.
func (mr *MockRepositoryMockRecorder) ListFollowID(ctx, userID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowID", reflect.TypeOf((*MockRepository)(nil).ListFollowID), varargs...)
}

// ListFollower mocks base method.
func (m *MockRepository) ListFollower(ctx context.Context, q *database.ListQuery) (user.Followers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollower", ctx, q)
	ret0, _ := ret[0].(user.Followers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollower indicates an expected call of ListFollower.
func (mr *MockRepositoryMockRecorder) ListFollower(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollower", reflect.TypeOf((*MockRepository)(nil).ListFollower), ctx, q)
}

// ListFollowerID mocks base method.
func (m *MockRepository) ListFollowerID(ctx context.Context, userID string, userIDs ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFollowerID", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowerID indicates an expected call of ListFollowerID.
func (mr *MockRepositoryMockRecorder) ListFollowerID(ctx, userID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowerID", reflect.TypeOf((*MockRepository)(nil).ListFollowerID), varargs...)
}

// ListInstanceID mocks base method.
func (m *MockRepository) ListInstanceID(ctx context.Context, q *database.ListQuery) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceID", ctx, q)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceID indicates an expected call of ListInstanceID.
func (mr *MockRepositoryMockRecorder) ListInstanceID(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceID", reflect.TypeOf((*MockRepository)(nil).ListInstanceID), ctx, q)
}

// MultiGet mocks base method.
func (m *MockRepository) MultiGet(ctx context.Context, userIDs []string) (user.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGet", ctx, userIDs)
	ret0, _ := ret[0].(user.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockRepositoryMockRecorder) MultiGet(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockRepository)(nil).MultiGet), ctx, userIDs)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, u)
}

// UpdatePassword mocks base method.
func (m *MockRepository) UpdatePassword(ctx context.Context, userID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepositoryMockRecorder) UpdatePassword(ctx, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepository)(nil).UpdatePassword), ctx, userID, password)
}
