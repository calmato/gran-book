// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/repository.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	domain "github.com/calmato/gran-book/api/server/user/internal/domain"
	user "github.com/calmato/gran-book/api/server/user/internal/domain/user"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Authentication mocks base method
func (m *MockRepository) Authentication(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication
func (mr *MockRepositoryMockRecorder) Authentication(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockRepository)(nil).Authentication), ctx)
}

// List mocks base method
func (m *MockRepository) List(ctx context.Context, q *domain.ListQuery) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, q)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, q)
}

// ListFollows mocks base method
func (m *MockRepository) ListFollows(ctx context.Context, q *domain.ListQuery) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollows", ctx, q)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollows indicates an expected call of ListFollows
func (mr *MockRepositoryMockRecorder) ListFollows(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollows", reflect.TypeOf((*MockRepository)(nil).ListFollows), ctx, q)
}

// ListFollowers mocks base method
func (m *MockRepository) ListFollowers(ctx context.Context, q *domain.ListQuery) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowers", ctx, q)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowers indicates an expected call of ListFollowers
func (mr *MockRepositoryMockRecorder) ListFollowers(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowers", reflect.TypeOf((*MockRepository)(nil).ListFollowers), ctx, q)
}

// ListCount mocks base method
func (m *MockRepository) ListCount(ctx context.Context, q *domain.ListQuery) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCount", ctx, q)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCount indicates an expected call of ListCount
func (mr *MockRepositoryMockRecorder) ListCount(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCount", reflect.TypeOf((*MockRepository)(nil).ListCount), ctx, q)
}

// ListFollowsCount mocks base method
func (m *MockRepository) ListFollowsCount(ctx context.Context, q *domain.ListQuery) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowsCount", ctx, q)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowsCount indicates an expected call of ListFollowsCount
func (mr *MockRepositoryMockRecorder) ListFollowsCount(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowsCount", reflect.TypeOf((*MockRepository)(nil).ListFollowsCount), ctx, q)
}

// ListFollowersCount mocks base method
func (m *MockRepository) ListFollowersCount(ctx context.Context, q *domain.ListQuery) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowersCount", ctx, q)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowersCount indicates an expected call of ListFollowersCount
func (mr *MockRepositoryMockRecorder) ListFollowersCount(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowersCount", reflect.TypeOf((*MockRepository)(nil).ListFollowersCount), ctx, q)
}

// Show mocks base method
func (m *MockRepository) Show(ctx context.Context, uid string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", ctx, uid)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show
func (mr *MockRepositoryMockRecorder) Show(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockRepository)(nil).Show), ctx, uid)
}

// Create mocks base method
func (m *MockRepository) Create(ctx context.Context, u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, u)
}

// Update mocks base method
func (m *MockRepository) Update(ctx context.Context, u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, u)
}

// UpdatePassword mocks base method
func (m *MockRepository) UpdatePassword(ctx context.Context, uid, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, uid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockRepositoryMockRecorder) UpdatePassword(ctx, uid, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepository)(nil).UpdatePassword), ctx, uid, password)
}

// GetUIDByEmail mocks base method
func (m *MockRepository) GetUIDByEmail(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUIDByEmail", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUIDByEmail indicates an expected call of GetUIDByEmail
func (mr *MockRepositoryMockRecorder) GetUIDByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUIDByEmail", reflect.TypeOf((*MockRepository)(nil).GetUIDByEmail), ctx, email)
}
