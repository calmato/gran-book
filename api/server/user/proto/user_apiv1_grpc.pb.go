// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	GetAuth(ctx context.Context, in *EmptyUser, opts ...grpc.CallOption) (*AuthResponse, error)
	CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdateAuthEmail(ctx context.Context, in *UpdateAuthEmailRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdateAuthPassword(ctx context.Context, in *UpdateAuthPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdateAuthProfile(ctx context.Context, in *UpdateAuthProfileRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdateAuthAddress(ctx context.Context, in *UpdateAuthAddressRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UploadAuthThumbnail(ctx context.Context, opts ...grpc.CallOption) (AuthService_UploadAuthThumbnailClient, error)
	DeleteAuth(ctx context.Context, in *EmptyUser, opts ...grpc.CallOption) (*EmptyUser, error)
	RegisterAuthDevice(ctx context.Context, in *RegisterAuthDeviceRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetAuth(ctx context.Context, in *EmptyUser, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CreateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateAuthEmail(ctx context.Context, in *UpdateAuthEmailRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdateAuthEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateAuthPassword(ctx context.Context, in *UpdateAuthPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdateAuthPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateAuthProfile(ctx context.Context, in *UpdateAuthProfileRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdateAuthProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateAuthAddress(ctx context.Context, in *UpdateAuthAddressRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdateAuthAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UploadAuthThumbnail(ctx context.Context, opts ...grpc.CallOption) (AuthService_UploadAuthThumbnailClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthService_serviceDesc.Streams[0], "/proto.AuthService/UploadAuthThumbnail", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceUploadAuthThumbnailClient{stream}
	return x, nil
}

type AuthService_UploadAuthThumbnailClient interface {
	Send(*UploadAuthThumbnailRequest) error
	CloseAndRecv() (*AuthThumbnailResponse, error)
	grpc.ClientStream
}

type authServiceUploadAuthThumbnailClient struct {
	grpc.ClientStream
}

func (x *authServiceUploadAuthThumbnailClient) Send(m *UploadAuthThumbnailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceUploadAuthThumbnailClient) CloseAndRecv() (*AuthThumbnailResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AuthThumbnailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) DeleteAuth(ctx context.Context, in *EmptyUser, opts ...grpc.CallOption) (*EmptyUser, error) {
	out := new(EmptyUser)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterAuthDevice(ctx context.Context, in *RegisterAuthDeviceRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/RegisterAuthDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	GetAuth(context.Context, *EmptyUser) (*AuthResponse, error)
	CreateAuth(context.Context, *CreateAuthRequest) (*AuthResponse, error)
	UpdateAuthEmail(context.Context, *UpdateAuthEmailRequest) (*AuthResponse, error)
	UpdateAuthPassword(context.Context, *UpdateAuthPasswordRequest) (*AuthResponse, error)
	UpdateAuthProfile(context.Context, *UpdateAuthProfileRequest) (*AuthResponse, error)
	UpdateAuthAddress(context.Context, *UpdateAuthAddressRequest) (*AuthResponse, error)
	UploadAuthThumbnail(AuthService_UploadAuthThumbnailServer) error
	DeleteAuth(context.Context, *EmptyUser) (*EmptyUser, error)
	RegisterAuthDevice(context.Context, *RegisterAuthDeviceRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) GetAuth(context.Context, *EmptyUser) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuth not implemented")
}
func (UnimplementedAuthServiceServer) CreateAuth(context.Context, *CreateAuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuth not implemented")
}
func (UnimplementedAuthServiceServer) UpdateAuthEmail(context.Context, *UpdateAuthEmailRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthEmail not implemented")
}
func (UnimplementedAuthServiceServer) UpdateAuthPassword(context.Context, *UpdateAuthPasswordRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthPassword not implemented")
}
func (UnimplementedAuthServiceServer) UpdateAuthProfile(context.Context, *UpdateAuthProfileRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthProfile not implemented")
}
func (UnimplementedAuthServiceServer) UpdateAuthAddress(context.Context, *UpdateAuthAddressRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthAddress not implemented")
}
func (UnimplementedAuthServiceServer) UploadAuthThumbnail(AuthService_UploadAuthThumbnailServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAuthThumbnail not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAuth(context.Context, *EmptyUser) (*EmptyUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuth not implemented")
}
func (UnimplementedAuthServiceServer) RegisterAuthDevice(context.Context, *RegisterAuthDeviceRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthDevice not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_GetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuth(ctx, req.(*EmptyUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CreateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAuth(ctx, req.(*CreateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateAuthEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateAuthEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdateAuthEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateAuthEmail(ctx, req.(*UpdateAuthEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateAuthPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateAuthPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdateAuthPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateAuthPassword(ctx, req.(*UpdateAuthPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateAuthProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateAuthProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdateAuthProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateAuthProfile(ctx, req.(*UpdateAuthProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateAuthAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateAuthAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdateAuthAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateAuthAddress(ctx, req.(*UpdateAuthAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UploadAuthThumbnail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).UploadAuthThumbnail(&authServiceUploadAuthThumbnailServer{stream})
}

type AuthService_UploadAuthThumbnailServer interface {
	SendAndClose(*AuthThumbnailResponse) error
	Recv() (*UploadAuthThumbnailRequest, error)
	grpc.ServerStream
}

type authServiceUploadAuthThumbnailServer struct {
	grpc.ServerStream
}

func (x *authServiceUploadAuthThumbnailServer) SendAndClose(m *AuthThumbnailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceUploadAuthThumbnailServer) Recv() (*UploadAuthThumbnailRequest, error) {
	m := new(UploadAuthThumbnailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthService_DeleteAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAuth(ctx, req.(*EmptyUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterAuthDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAuthDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterAuthDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/RegisterAuthDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterAuthDevice(ctx, req.(*RegisterAuthDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuth",
			Handler:    _AuthService_GetAuth_Handler,
		},
		{
			MethodName: "CreateAuth",
			Handler:    _AuthService_CreateAuth_Handler,
		},
		{
			MethodName: "UpdateAuthEmail",
			Handler:    _AuthService_UpdateAuthEmail_Handler,
		},
		{
			MethodName: "UpdateAuthPassword",
			Handler:    _AuthService_UpdateAuthPassword_Handler,
		},
		{
			MethodName: "UpdateAuthProfile",
			Handler:    _AuthService_UpdateAuthProfile_Handler,
		},
		{
			MethodName: "UpdateAuthAddress",
			Handler:    _AuthService_UpdateAuthAddress_Handler,
		},
		{
			MethodName: "DeleteAuth",
			Handler:    _AuthService_DeleteAuth_Handler,
		},
		{
			MethodName: "RegisterAuthDevice",
			Handler:    _AuthService_RegisterAuthDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAuthThumbnail",
			Handler:       _AuthService_UploadAuthThumbnail_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/user_apiv1.proto",
}

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	ListAdmin(ctx context.Context, in *ListAdminRequest, opts ...grpc.CallOption) (*AdminListResponse, error)
	SearchAdmin(ctx context.Context, in *SearchAdminRequest, opts ...grpc.CallOption) (*AdminListResponse, error)
	GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	UpdateAdminContact(ctx context.Context, in *UpdateAdminContactRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	UpdateAdminPassword(ctx context.Context, in *UpdateAdminPasswordRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	UpdateAdminProfile(ctx context.Context, in *UpdateAdminProfileRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	UploadAdminThumbnail(ctx context.Context, opts ...grpc.CallOption) (AdminService_UploadAdminThumbnailClient, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*EmptyUser, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) ListAdmin(ctx context.Context, in *ListAdminRequest, opts ...grpc.CallOption) (*AdminListResponse, error) {
	out := new(AdminListResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/ListAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SearchAdmin(ctx context.Context, in *SearchAdminRequest, opts ...grpc.CallOption) (*AdminListResponse, error) {
	out := new(AdminListResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/SearchAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAdminContact(ctx context.Context, in *UpdateAdminContactRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/UpdateAdminContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAdminPassword(ctx context.Context, in *UpdateAdminPasswordRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/UpdateAdminPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAdminProfile(ctx context.Context, in *UpdateAdminProfileRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/proto.AdminService/UpdateAdminProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UploadAdminThumbnail(ctx context.Context, opts ...grpc.CallOption) (AdminService_UploadAdminThumbnailClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdminService_serviceDesc.Streams[0], "/proto.AdminService/UploadAdminThumbnail", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceUploadAdminThumbnailClient{stream}
	return x, nil
}

type AdminService_UploadAdminThumbnailClient interface {
	Send(*UploadAdminThumbnailRequest) error
	CloseAndRecv() (*AdminThumbnailResponse, error)
	grpc.ClientStream
}

type adminServiceUploadAdminThumbnailClient struct {
	grpc.ClientStream
}

func (x *adminServiceUploadAdminThumbnailClient) Send(m *UploadAdminThumbnailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminServiceUploadAdminThumbnailClient) CloseAndRecv() (*AdminThumbnailResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AdminThumbnailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*EmptyUser, error) {
	out := new(EmptyUser)
	err := c.cc.Invoke(ctx, "/proto.AdminService/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	ListAdmin(context.Context, *ListAdminRequest) (*AdminListResponse, error)
	SearchAdmin(context.Context, *SearchAdminRequest) (*AdminListResponse, error)
	GetAdmin(context.Context, *GetAdminRequest) (*AdminResponse, error)
	CreateAdmin(context.Context, *CreateAdminRequest) (*AdminResponse, error)
	UpdateAdminContact(context.Context, *UpdateAdminContactRequest) (*AdminResponse, error)
	UpdateAdminPassword(context.Context, *UpdateAdminPasswordRequest) (*AdminResponse, error)
	UpdateAdminProfile(context.Context, *UpdateAdminProfileRequest) (*AdminResponse, error)
	UploadAdminThumbnail(AdminService_UploadAdminThumbnailServer) error
	DeleteAdmin(context.Context, *DeleteAdminRequest) (*EmptyUser, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) ListAdmin(context.Context, *ListAdminRequest) (*AdminListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmin not implemented")
}
func (UnimplementedAdminServiceServer) SearchAdmin(context.Context, *SearchAdminRequest) (*AdminListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAdmin not implemented")
}
func (UnimplementedAdminServiceServer) GetAdmin(context.Context, *GetAdminRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (UnimplementedAdminServiceServer) CreateAdmin(context.Context, *CreateAdminRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAdminContact(context.Context, *UpdateAdminContactRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminContact not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAdminPassword(context.Context, *UpdateAdminPasswordRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminPassword not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAdminProfile(context.Context, *UpdateAdminProfileRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminProfile not implemented")
}
func (UnimplementedAdminServiceServer) UploadAdminThumbnail(AdminService_UploadAdminThumbnailServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAdminThumbnail not implemented")
}
func (UnimplementedAdminServiceServer) DeleteAdmin(context.Context, *DeleteAdminRequest) (*EmptyUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_ListAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/ListAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListAdmin(ctx, req.(*ListAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SearchAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SearchAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/SearchAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SearchAdmin(ctx, req.(*SearchAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAdmin(ctx, req.(*GetAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateAdmin(ctx, req.(*CreateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAdminContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAdminContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/UpdateAdminContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAdminContact(ctx, req.(*UpdateAdminContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAdminPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAdminPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/UpdateAdminPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAdminPassword(ctx, req.(*UpdateAdminPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAdminProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAdminProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/UpdateAdminProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAdminProfile(ctx, req.(*UpdateAdminProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UploadAdminThumbnail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminServiceServer).UploadAdminThumbnail(&adminServiceUploadAdminThumbnailServer{stream})
}

type AdminService_UploadAdminThumbnailServer interface {
	SendAndClose(*AdminThumbnailResponse) error
	Recv() (*UploadAdminThumbnailRequest, error)
	grpc.ServerStream
}

type adminServiceUploadAdminThumbnailServer struct {
	grpc.ServerStream
}

func (x *adminServiceUploadAdminThumbnailServer) SendAndClose(m *AdminThumbnailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminServiceUploadAdminThumbnailServer) Recv() (*UploadAdminThumbnailRequest, error) {
	m := new(UploadAdminThumbnailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdminService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteAdmin(ctx, req.(*DeleteAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAdmin",
			Handler:    _AdminService_ListAdmin_Handler,
		},
		{
			MethodName: "SearchAdmin",
			Handler:    _AdminService_SearchAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _AdminService_GetAdmin_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _AdminService_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdminContact",
			Handler:    _AdminService_UpdateAdminContact_Handler,
		},
		{
			MethodName: "UpdateAdminPassword",
			Handler:    _AdminService_UpdateAdminPassword_Handler,
		},
		{
			MethodName: "UpdateAdminProfile",
			Handler:    _AdminService_UpdateAdminProfile_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _AdminService_DeleteAdmin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAdminThumbnail",
			Handler:       _AdminService_UploadAdminThumbnail_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/user_apiv1.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	ListUserByUserIds(ctx context.Context, in *ListUserByUserIdsRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	ListFollow(ctx context.Context, in *ListFollowRequest, opts ...grpc.CallOption) (*FollowListResponse, error)
	ListFollower(ctx context.Context, in *ListFollowerRequest, opts ...grpc.CallOption) (*FollowerListResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	RegisterFollow(ctx context.Context, in *RegisterFollowRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	UnregisterFollow(ctx context.Context, in *UnregisterFollowRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUserByUserIds(ctx context.Context, in *ListUserByUserIdsRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/ListUserByUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListFollow(ctx context.Context, in *ListFollowRequest, opts ...grpc.CallOption) (*FollowListResponse, error) {
	out := new(FollowListResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/ListFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListFollower(ctx context.Context, in *ListFollowerRequest, opts ...grpc.CallOption) (*FollowerListResponse, error) {
	out := new(FollowerListResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/ListFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterFollow(ctx context.Context, in *RegisterFollowRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/RegisterFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnregisterFollow(ctx context.Context, in *UnregisterFollowRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/UnregisterFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	ListUser(context.Context, *ListUserRequest) (*UserListResponse, error)
	ListUserByUserIds(context.Context, *ListUserByUserIdsRequest) (*UserListResponse, error)
	ListFollow(context.Context, *ListFollowRequest) (*FollowListResponse, error)
	ListFollower(context.Context, *ListFollowerRequest) (*FollowerListResponse, error)
	SearchUser(context.Context, *SearchUserRequest) (*UserListResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*UserProfileResponse, error)
	RegisterFollow(context.Context, *RegisterFollowRequest) (*UserProfileResponse, error)
	UnregisterFollow(context.Context, *UnregisterFollowRequest) (*UserProfileResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) ListUser(context.Context, *ListUserRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServiceServer) ListUserByUserIds(context.Context, *ListUserByUserIdsRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserByUserIds not implemented")
}
func (UnimplementedUserServiceServer) ListFollow(context.Context, *ListFollowRequest) (*FollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollow not implemented")
}
func (UnimplementedUserServiceServer) ListFollower(context.Context, *ListFollowerRequest) (*FollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollower not implemented")
}
func (UnimplementedUserServiceServer) SearchUser(context.Context, *SearchUserRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServiceServer) RegisterFollow(context.Context, *RegisterFollowRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFollow not implemented")
}
func (UnimplementedUserServiceServer) UnregisterFollow(context.Context, *UnregisterFollowRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterFollow not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUserByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUserByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ListUserByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUserByUserIds(ctx, req.(*ListUserByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ListFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListFollow(ctx, req.(*ListFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ListFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListFollower(ctx, req.(*ListFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/RegisterFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterFollow(ctx, req.(*RegisterFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnregisterFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnregisterFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UnregisterFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnregisterFollow(ctx, req.(*UnregisterFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _UserService_ListUser_Handler,
		},
		{
			MethodName: "ListUserByUserIds",
			Handler:    _UserService_ListUserByUserIds_Handler,
		},
		{
			MethodName: "ListFollow",
			Handler:    _UserService_ListFollow_Handler,
		},
		{
			MethodName: "ListFollower",
			Handler:    _UserService_ListFollower_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _UserService_SearchUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
		{
			MethodName: "RegisterFollow",
			Handler:    _UserService_RegisterFollow_Handler,
		},
		{
			MethodName: "UnregisterFollow",
			Handler:    _UserService_UnregisterFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_apiv1.proto",
}

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	ListRoom(ctx context.Context, in *ListChatRoomRequest, opts ...grpc.CallOption) (*ChatRoomListResponse, error)
	CreateRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	CreateMessage(ctx context.Context, in *CreateChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error)
	UploadImage(ctx context.Context, in *UploadChatImageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ListRoom(ctx context.Context, in *ListChatRoomRequest, opts ...grpc.CallOption) (*ChatRoomListResponse, error) {
	out := new(ChatRoomListResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatService/ListRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateMessage(ctx context.Context, in *CreateChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	out := new(ChatMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UploadImage(ctx context.Context, in *UploadChatImageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	out := new(ChatMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	ListRoom(context.Context, *ListChatRoomRequest) (*ChatRoomListResponse, error)
	CreateRoom(context.Context, *CreateChatRoomRequest) (*ChatRoomResponse, error)
	CreateMessage(context.Context, *CreateChatMessageRequest) (*ChatMessageResponse, error)
	UploadImage(context.Context, *UploadChatImageRequest) (*ChatMessageResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) ListRoom(context.Context, *ListChatRoomRequest) (*ChatRoomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoom not implemented")
}
func (UnimplementedChatServiceServer) CreateRoom(context.Context, *CreateChatRoomRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChatServiceServer) CreateMessage(context.Context, *CreateChatMessageRequest) (*ChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedChatServiceServer) UploadImage(context.Context, *UploadChatImageRequest) (*ChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_ListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/ListRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListRoom(ctx, req.(*ListChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateRoom(ctx, req.(*CreateChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateMessage(ctx, req.(*CreateChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChatImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UploadImage(ctx, req.(*UploadChatImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoom",
			Handler:    _ChatService_ListRoom_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _ChatService_CreateRoom_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _ChatService_CreateMessage_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _ChatService_UploadImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_apiv1.proto",
}
